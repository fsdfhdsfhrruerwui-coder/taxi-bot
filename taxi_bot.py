# taxi_bot.py

import asyncio
import sqlite3
import logging
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---
# –¶—ñ –¥–∞–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥—É –≤ "Environment Variables"
# –¶–µ —Ä–æ–±–∏—Ç—å –∫–æ–¥ –±–µ–∑–ø–µ—á–Ω–∏–º, –æ—Å–∫—ñ–ª—å–∫–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ñ –∫–ª—é—á—ñ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É —Ñ–∞–π–ª—ñ.
BOT_TOKEN = os.environ.get("BOT_TOKEN")
REGISTRATION_PASSWORD = os.environ.get("REGISTRATION_PASSWORD", "taxi_driver_2025") # –ü–∞—Ä–æ–ª—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
ADMIN_ID = int(os.environ.get("ADMIN_ID", 0)) # –í–∞—à Telegram ID

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ë–ê–ó–ê –î–ê–ù–ò–• (SQLite) ---
DB_FILE = "taxi_drivers.db"

def init_db():
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞–±–ª–∏—Ü—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö, —è–∫—â–æ —ó—Ö —â–µ –Ω–µ —ñ—Å–Ω—É—î."""
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS drivers (
                user_id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                car_brand TEXT,
                car_plate TEXT,
                platform TEXT,
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                driver_id INTEGER NOT NULL,
                type TEXT NOT NULL,
                amount REAL NOT NULL,
                date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (driver_id) REFERENCES drivers (user_id)
            )''')
        conn.commit()

# --- –°–¢–ê–ù–ò (FSM) –¥–ª—è –ø–æ–∫—Ä–æ–∫–æ–≤–∏—Ö –¥—ñ–π ---
class Registration(StatesGroup):
    waiting_for_password = State()
    waiting_for_name = State()
    waiting_for_car_brand = State()
    waiting_for_car_plate = State()
    waiting_for_platform = State()

class AddTransaction(StatesGroup):
    waiting_for_amount = State()

class EditProfile(StatesGroup):
    choosing_field = State()
    entering_new_value = State()
    
class AdminEdit(StatesGroup):
    entering_user_id = State()
    choosing_field = State()
    entering_new_value = State()


# --- –ö–õ–ê–í–Ü–ê–¢–£–†–ò ---
def get_main_menu_keyboard():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏."""
    buttons = [
        [KeyboardButton(text="‚úÖ –î–æ–¥–∞—Ç–∏ –î–æ—Ö—ñ–¥/–ß–∞–π–æ–≤—ñ"), KeyboardButton(text="‚ûñ –î–æ–¥–∞—Ç–∏ –í–∏—Ç—Ä–∞—Ç—É")],
        [KeyboardButton(text="üìä –ú–æ—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥ –í–æ–¥—ñ—ó–≤")],
        [KeyboardButton(text="üë§ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# --- –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î –¢–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ---
dp = Dispatcher()

async def is_registered(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö."""
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT 1 FROM drivers WHERE user_id = ?", (user_id,))
        return cursor.fetchone() is not None

# --- –°–¢–ê–†–¢ –¢–ê –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø ---
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    if await is_registered(message.from_user.id):
        await message.answer(f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {message.from_user.first_name}! üëã", reply_markup=get_main_menu_keyboard())
    else:
        await message.answer("üëã –í—ñ—Ç–∞—é —É –±–æ—Ç—ñ –¥–ª—è –≤–æ–¥—ñ—ó–≤!\n\n–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")
        await state.set_state(Registration.waiting_for_password)

@dp.message(Registration.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–∏–π –ø–∞—Ä–æ–ª—å."""
    if message.text == REGISTRATION_PASSWORD:
        await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤—ñ—Ä–Ω–∏–π! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:")
        await state.set_state(Registration.waiting_for_name)
    else:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@dp.message(Registration.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –º–∞—Ä–∫—É —Ç–∞ –º–æ–¥–µ–ª—å –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ (–Ω–∞–ø—Ä., Kia Optima):")
    await state.set_state(Registration.waiting_for_car_brand)

@dp.message(Registration.waiting_for_car_brand)
async def process_car_brand(message: Message, state: FSMContext):
    await state.update_data(car_brand=message.text)
    await message.answer("–ü—Ä–∏–π–Ω—è—Ç–æ. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–Ω–∏–π –∑–Ω–∞–∫ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è (–Ω–∞–ø—Ä., BC 1234 HI):")
    await state.set_state(Registration.waiting_for_car_plate)

@dp.message(Registration.waiting_for_car_plate)
async def process_car_plate(message: Message, state: FSMContext):
    await state.update_data(car_plate=message.text.upper())
    await message.answer("–ú–∞–π–∂–µ –≥–æ—Ç–æ–≤–æ! –ù–∞ —è–∫—ñ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ –ø—Ä–∞—Ü—é—î—Ç–µ? (–Ω–∞–ø—Ä., Uber, Bolt, Uklon)")
    await state.set_state(Registration.waiting_for_platform)

@dp.message(Registration.waiting_for_platform)
async def process_platform_and_finish_reg(message: Message, state: FSMContext):
    user_data = await state.get_data()
    
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO drivers (user_id, name, car_brand, car_plate, platform) VALUES (?, ?, ?, ?, ?)",
            (message.from_user.id, user_data['name'], user_data['car_brand'], user_data['car_plate'], message.text)
        )
        conn.commit()

    await state.clear()
    await message.answer("üéâ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!", reply_markup=get_main_menu_keyboard())


# --- –î–û–î–ê–í–ê–ù–ù–Ø –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô ---
@dp.message(F.text == "‚úÖ –î–æ–¥–∞—Ç–∏ –î–æ—Ö—ñ–¥/–ß–∞–π–æ–≤—ñ")
async def add_income_menu(message: Message):
    buttons = [
        [InlineKeyboardButton(text="üí∞ –î–æ—Ö—ñ–¥", callback_data="add_transaction_–¥–æ—Ö—ñ–¥")],
        [InlineKeyboardButton(text="üéÅ –ß–∞–π–æ–≤—ñ", callback_data="add_transaction_—á–∞–π")]
    ]
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ—Ö–æ–¥—É:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.message(F.text == "‚ûñ –î–æ–¥–∞—Ç–∏ –í–∏—Ç—Ä–∞—Ç—É")
async def add_expense_menu(message: Message):
    buttons = [
        [InlineKeyboardButton(text="‚õΩ –ü–∞–ª–∏–≤–æ", callback_data="add_transaction_–ø–∞–ª–∏–≤–æ"), InlineKeyboardButton(text="üßº –ú–∏–π–∫–∞", callback_data="add_transaction_–º–∏–π–∫–∞")],
        [InlineKeyboardButton(text="üçî –á–∂–∞", callback_data="add_transaction_—ó–∂–∞"), InlineKeyboardButton(text="üõ†Ô∏è –†–µ–º–æ–Ω—Ç", callback_data="add_transaction_—Ä–µ–º–æ–Ω—Ç")],
        [InlineKeyboardButton(text="–Ü–Ω—à–µ", callback_data="add_transaction_—ñ–Ω—à–µ")]
    ]
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤–∏—Ç—Ä–∞—Ç–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data.startswith("add_transaction_"))
async def process_add_transaction_type(callback: CallbackQuery, state: FSMContext):
    transaction_type = callback.data.split("_")[-1]
    await state.update_data(transaction_type=transaction_type)
    await callback.message.answer(f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è '{transaction_type.capitalize()}':")
    await state.set_state(AddTransaction.waiting_for_amount)
    await callback.answer()

@dp.message(AddTransaction.waiting_for_amount)
async def process_transaction_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        user_data = await state.get_data()
        transaction_type = user_data['transaction_type']
        
        with sqlite3.connect(DB_FILE) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO transactions (driver_id, type, amount) VALUES (?, ?, ?)",
                (message.from_user.id, transaction_type, amount)
            )
            conn.commit()
        
        await message.answer(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ: **{transaction_type.capitalize()}** –Ω–∞ —Å—É–º—É **{amount:.2f} –≥—Ä–Ω**.", parse_mode="Markdown")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä., 150 –∞–±–æ 95.50).")


# --- –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ê –†–ï–ô–¢–ò–ù–ì ---
@dp.message(F.text == "üìä –ú–æ—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_my_stats(message: Message):
    user_id = message.from_user.id
    current_month = datetime.now().strftime('%Y-%m')
    
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
        cursor.execute("""
            SELECT type, SUM(amount) FROM transactions
            WHERE driver_id = ? AND strftime('%Y-%m', date) = ?
            GROUP BY type
        """, (user_id, current_month))
        monthly_stats = cursor.fetchall()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤–µ—Å—å —á–∞—Å
        cursor.execute("SELECT type, SUM(amount) FROM transactions WHERE driver_id = ? GROUP BY type", (user_id,))
        total_stats = cursor.fetchall()

    def format_stats(title, stats):
        text = f"**{title}**\n"
        income = sum(amt for type, amt in stats if type in ['–¥–æ—Ö—ñ–¥', '—á–∞–π'])
        expenses = sum(amt for type, amt in stats if type not in ['–¥–æ—Ö—ñ–¥', '—á–∞–π'])
        if not stats: return f"**{title}**\n–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.\n"
        
        text += f"üü¢ **–ó–∞—Ä–æ–±–ª–µ–Ω–æ:** {income:.2f} –≥—Ä–Ω\n"
        text += f"üî¥ **–í–∏—Ç—Ä–∞—á–µ–Ω–æ:** {expenses:.2f} –≥—Ä–Ω\n"
        text += f"üí∞ **–ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫:** {(income - expenses):.2f} –≥—Ä–Ω\n\n"
        text += "–î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è:\n"
        for type, amount in stats:
            text += f" - {type.capitalize()}: {amount:.2f} –≥—Ä–Ω\n"
        return text

    await message.answer(
        f"{format_stats('üóìÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å', monthly_stats)}\n---\n{format_stats('üï∞Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤–µ—Å—å —á–∞—Å', total_stats)}",
        parse_mode="Markdown"
    )

@dp.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥ –í–æ–¥—ñ—ó–≤")
async def show_rating(message: Message):
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        current_month = datetime.now().strftime('%Y-%m')

        # –†–µ–π—Ç–∏–Ω–≥ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
        cursor.execute("""
            SELECT d.name, SUM(t.amount)
            FROM transactions t JOIN drivers d ON t.driver_id = d.user_id
            WHERE t.type IN ('–¥–æ—Ö—ñ–¥', '—á–∞–π') AND strftime('%Y-%m', t.date) = ?
            GROUP BY d.user_id ORDER BY SUM(t.amount) DESC LIMIT 10
        """, (current_month,))
        monthly_rating = cursor.fetchall()

        # –†–µ–π—Ç–∏–Ω–≥ –∑–∞ –≤–µ—Å—å —á–∞—Å
        cursor.execute("""
            SELECT d.name, SUM(t.amount)
            FROM transactions t JOIN drivers d ON t.driver_id = d.user_id
            WHERE t.type IN ('–¥–æ—Ö—ñ–¥', '—á–∞–π')
            GROUP BY d.user_id ORDER BY SUM(t.amount) DESC LIMIT 10
        """)
        all_time_rating = cursor.fetchall()

    def format_rating(title, rating_data):
        text = f"**{title}**\n"
        if not rating_data: return text + "–©–µ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥—É.\n"
        
        medals = ["ü•á", "ü•à", "ü•â"]
        for i, (name, total) in enumerate(rating_data):
            place = medals[i] if i < 3 else f" {i+1}. "
            text += f"{place} {name} - {total:.2f} –≥—Ä–Ω\n"
        return text

    await message.answer(
        f"üèÜ **–†–µ–π—Ç–∏–Ω–≥ –∑–∞—Ä–æ–±—ñ—Ç–∫—É –≤–æ–¥—ñ—ó–≤** üèÜ\n\n"
        f"{format_rating('üóìÔ∏è –ó–∞ –ü–æ—Ç–æ—á–Ω–∏–π –ú—ñ—Å—è—Ü—å', monthly_rating)}\n---\n"
        f"{format_rating('üï∞Ô∏è –ó–∞ –í–µ—Å—å –ß–∞—Å', all_time_rating)}",
        parse_mode="Markdown"
    )

# --- –ü–†–û–§–Ü–õ–¨ ---
@dp.message(F.text == "üë§ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å")
async def show_my_profile(message: Message):
    user_id = message.from_user.id
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT name, car_brand, car_plate, platform FROM drivers WHERE user_id = ?", (user_id,))
        profile = cursor.fetchone()

    if profile:
        name, car_brand, car_plate, platform = profile
        text = (f"**üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:**\n\n"
                f"**–Ü–º'—è:** {name}\n"
                f"**–ê–≤—Ç–æ:** {car_brand}\n"
                f"**–ù–æ–º–µ—Ä:** {car_plate}\n"
                f"**–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** {platform}\n\n"
                f"–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ?")
        buttons = [[InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="edit_profile_start")]]
        await message.answer(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    else:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å.")

@dp.callback_query(F.data == "edit_profile_start")
async def edit_profile_start(callback: CallbackQuery, state: FSMContext):
    buttons = [
        [InlineKeyboardButton(text="–Ü–º'—è", callback_data="edit_field_name")],
        [InlineKeyboardButton(text="–ê–≤—Ç–æ", callback_data="edit_field_car_brand")],
        [InlineKeyboardButton(text="–ù–æ–º–µ—Ä", callback_data="edit_field_car_plate")],
        [InlineKeyboardButton(text="–ü–ª–∞—Ç—Ñ–æ—Ä–º—É", callback_data="edit_field_platform")],
    ]
    await callback.message.edit_text("–Ø–∫–µ –ø–æ–ª–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await state.set_state(EditProfile.choosing_field)
    await callback.answer()

@dp.callback_query(EditProfile.choosing_field, F.data.startswith("edit_field_"))
async def edit_profile_choose_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[-1]
    field_map = {
        'name': "—ñ–º'—è", 'car_brand': "–º–∞—Ä–∫—É –∞–≤—Ç–æ", 'car_plate': "–Ω–æ–º–µ—Ä –∞–≤—Ç–æ", 'platform': "–ø–ª–∞—Ç—Ñ–æ—Ä–º—É"
    }
    await state.update_data(field_to_edit=field)
    await callback.message.edit_text(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—è '{field_map[field]}':")
    await state.set_state(EditProfile.entering_new_value)
    await callback.answer()

@dp.message(EditProfile.entering_new_value)
async def edit_profile_enter_value(message: Message, state: FSMContext):
    user_data = await state.get_data()
    field = user_data['field_to_edit']
    new_value = message.text
    
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        # –í–∞–∂–ª–∏–≤–æ: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω—ñ –∑–∞–ø–∏—Ç–∏ –¥–ª—è –±–µ–∑–ø–µ–∫–∏
        cursor.execute(f"UPDATE drivers SET {field} = ? WHERE user_id = ?", (new_value, message.from_user.id))
        conn.commit()
    
    await message.answer("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()
    await show_my_profile(message) # –ü–æ–∫–∞–∑–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å


# --- –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨ ---
@dp.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–í—ñ—Ç–∞—é, –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ! –í–≤–µ–¥—ñ—Ç—å User ID –≤–æ–¥—ñ—è, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:")
    await state.set_state(AdminEdit.entering_user_id)


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    if not BOT_TOKEN:
        logging.critical("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ BOT_TOKEN. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è.")
        return

    bot = Bot(token=BOT_TOKEN)
    init_db()  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É.")