# taxi_bot.py (–í–µ—Ä—Å—ñ—è 12.2 - –ó –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥—É Render)

import asyncio
import sqlite3
import logging
import os
from datetime import datetime, timedelta
from threading import Thread
from flask import Flask

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode

# --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---
BOT_TOKEN = os.environ.get("BOT_TOKEN")
DEFAULT_REGISTRATION_PASSWORD = "taxi_driver_2025"
ADMIN_ID = int(os.environ.get("ADMIN_ID", 0))
USERS_PER_PAGE = 5

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø "–®–ò–†–ú–ò" (Flask) –¥–ª—è Render ---
app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is running!"

def run_flask():
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

# --- –ë–ê–ó–ê –î–ê–ù–ò–• (SQLite) ---
DB_FILE = "taxi_drivers.db"

def init_db():
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS drivers (user_id INTEGER PRIMARY KEY, name TEXT NOT NULL, car_brand TEXT, car_plate TEXT, platform TEXT, registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        cursor.execute('''CREATE TABLE IF NOT EXISTS transactions (id INTEGER PRIMARY KEY AUTOINCREMENT, driver_id INTEGER NOT NULL, type TEXT NOT NULL, amount REAL NOT NULL, date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (driver_id) REFERENCES drivers (user_id))''')
        cursor.execute('''CREATE TABLE IF NOT EXISTS settings (key TEXT PRIMARY KEY, value TEXT NOT NULL)''')
        cursor.execute("INSERT OR IGNORE INTO settings (key, value) VALUES (?, ?)", ('password', DEFAULT_REGISTRATION_PASSWORD))
        conn.commit()

# --- –°–¢–ê–ù–ò FSM ---
class Registration(StatesGroup):
    waiting_for_password, waiting_for_name, waiting_for_car_brand, waiting_for_car_plate, waiting_for_platform = [State() for _ in range(5)]

class AddTransaction(StatesGroup):
    waiting_for_amount = State()

class EditProfile(StatesGroup):
    choosing_field, entering_new_value = [State() for _ in range(2)]

class AdminEdit(StatesGroup):
    choosing_user, choosing_field, entering_new_value = [State() for _ in range(3)]
    managing_finances = State()
    adding_transaction_type, adding_transaction_amount = [State() for _ in range(2)]
    editing_transaction_amount = State()

class AdminSettings(StatesGroup):
    choosing_setting, entering_new_password = [State() for _ in range(2)]

# --- –ö–õ–ê–í–Ü–ê–¢–£–†–ò ---
def get_main_menu_keyboard():
    buttons = [
        [KeyboardButton(text="‚úÖ –î–æ–¥–∞—Ç–∏ –î–æ—Ö—ñ–¥/–ß–∞–π–æ–≤—ñ"), KeyboardButton(text="‚ûñ –î–æ–¥–∞—Ç–∏ –í–∏—Ç—Ä–∞—Ç—É")],
        [KeyboardButton(text="üìä –ú–æ—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üìà –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥ –í–æ–¥—ñ—ó–≤"), KeyboardButton(text="üë§ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, row_width=2)

def get_cancel_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="action_cancel")]])

async def get_admin_user_list_keyboard(page: int = 0) -> InlineKeyboardMarkup:
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        offset = page * USERS_PER_PAGE
        cursor.execute("SELECT user_id, name FROM drivers ORDER BY registration_date DESC LIMIT ? OFFSET ?", (USERS_PER_PAGE, offset))
        users = cursor.fetchall()
        cursor.execute("SELECT COUNT(user_id) FROM drivers")
        total_users = cursor.fetchone()[0]
    keyboard = []
    for user_id, name in users:
        keyboard.append([InlineKeyboardButton(text=name, callback_data=f"admin_select_user_{user_id}")])
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_page_{page - 1}"))
    if offset + USERS_PER_PAGE < total_users:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"admin_page_{page + 1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data="admin_finish")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def get_admin_user_management_keyboard(user_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data=f"admin_edit_profile_{user_id}")],
        [InlineKeyboardButton(text="üí∞ –ö–µ—Ä—É–≤–∞—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏", callback_data=f"admin_manage_finances_{user_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ —Å–ø–∏—Å–∫—É", callback_data="admin_back_to_list")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ---
def format_currency(amount: float) -> str:
    if amount == int(amount): return f"{int(amount)} –≥—Ä–Ω"
    return f"{amount:.2f} –≥—Ä–Ω"

async def is_registered(user_id: int) -> bool:
    try:
        with sqlite3.connect(DB_FILE) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT 1 FROM drivers WHERE user_id = ?", (user_id,))
            return cursor.fetchone() is not None
    except sqlite3.OperationalError: return False

# --- –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê –ë–û–¢–ê ---
dp = Dispatcher()

@dp.callback_query(F.data == "action_cancel")
async def handle_cancel_action(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None and "AdminEdit" in current_state:
        user_data = await state.get_data()
        user_id = user_data.get('user_to_edit')
        await callback.message.edit_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        await state.set_state(AdminEdit.choosing_user)
        if user_id:
            await admin_select_user(callback, state, user_id_from_context=user_id)
        else:
             await admin_finish(callback, state)
    else:
        await state.clear()
        await callback.message.edit_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        await callback.message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())
    await callback.answer()

@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    if await is_registered(message.from_user.id):
        await message.answer(f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {message.from_user.first_name}! üëã", reply_markup=get_main_menu_keyboard())
    else:
        await message.answer("üëã –í—ñ—Ç–∞—é —É –±–æ—Ç—ñ –¥–ª—è –≤–æ–¥—ñ—ó–≤!\n\n–¶–µ –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤–µ–¥–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Registration.waiting_for_password)

@dp.message(Command("menu"))
async def show_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())

@dp.message(Registration.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT value FROM settings WHERE key = 'password'")
        current_password = cursor.fetchone()[0]
    if message.text == current_password:
        await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤—ñ—Ä–Ω–∏–π! –Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?\n(–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞, –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º, –ø—Ä—ñ–∑–≤–∏—â–µ):")
        await state.set_state(Registration.waiting_for_name)
    else:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@dp.message(Registration.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ß—É–¥–æ–≤–æ! –í–∫–∞–∂—ñ—Ç—å –º–∞—Ä–∫—É —Ç–∞ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ (–Ω–∞–ø—Ä., Kia Optima):")
    await state.set_state(Registration.waiting_for_car_brand)

@dp.message(Registration.waiting_for_car_brand)
async def process_car_brand(message: Message, state: FSMContext):
    await state.update_data(car_brand=message.text)
    await message.answer("–ü—Ä–∏–π–Ω—è—Ç–æ. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–Ω–∏–π –∑–Ω–∞–∫ (–Ω–∞–ø—Ä., BC 1234 HI):")
    await state.set_state(Registration.waiting_for_car_plate)

@dp.message(Registration.waiting_for_car_plate)
async def process_car_plate(message: Message, state: FSMContext):
    await state.update_data(car_plate=message.text.upper())
    await message.answer("–ú–∞–π–∂–µ –≥–æ—Ç–æ–≤–æ! –ù–∞ —è–∫—ñ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ –ø—Ä–∞—Ü—é—î—Ç–µ? (–Ω–∞–ø—Ä., Uber, Bolt)")
    await state.set_state(Registration.waiting_for_platform)

@dp.message(Registration.waiting_for_platform)
async def process_platform_and_finish_reg(message: Message, state: FSMContext):
    user_data = await state.get_data()
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO drivers (user_id, name, car_brand, car_plate, platform) VALUES (?, ?, ?, ?, ?)", (message.from_user.id, user_data['name'], user_data['car_brand'], user_data['car_plate'], message.text))
        conn.commit()
    await state.clear()
    await message.answer("üéâ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!", reply_markup=get_main_menu_keyboard())

@dp.message(F.text == "‚úÖ –î–æ–¥–∞—Ç–∏ –î–æ—Ö—ñ–¥/–ß–∞–π–æ–≤—ñ")
async def add_income_menu(message: Message):
    buttons = [[InlineKeyboardButton(text="üí∞ –î–æ—Ö—ñ–¥", callback_data="add_transaction_–¥–æ—Ö—ñ–¥")], [InlineKeyboardButton(text="üéÅ –ß–∞–π–æ–≤—ñ", callback_data="add_transaction_—á–∞–π")]]
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ—Ö–æ–¥—É:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.message(F.text == "‚ûñ –î–æ–¥–∞—Ç–∏ –í–∏—Ç—Ä–∞—Ç—É")
async def add_expense_menu(message: Message):
    buttons = [[InlineKeyboardButton(text="‚õΩ –ü–∞–ª–∏–≤–æ", callback_data="add_transaction_–ø–∞–ª–∏–≤–æ"), InlineKeyboardButton(text="üßº –ú–∏–π–∫–∞", callback_data="add_transaction_–º–∏–π–∫–∞")], [InlineKeyboardButton(text="üçî –á–∂–∞", callback_data="add_transaction_—ó–∂–∞"), InlineKeyboardButton(text="üõ†Ô∏è –†–µ–º–æ–Ω—Ç", callback_data="add_transaction_—Ä–µ–º–æ–Ω—Ç")], [InlineKeyboardButton(text="–Ü–Ω—à–µ", callback_data="add_transaction_—ñ–Ω—à–µ")]]
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤–∏—Ç—Ä–∞—Ç–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data.startswith("add_transaction_"))
async def process_add_transaction_type(callback: CallbackQuery, state: FSMContext):
    transaction_type = callback.data.split("_")[-1]
    await state.update_data(transaction_type=transaction_type)
    await callback.message.edit_text(f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è '{transaction_type.capitalize()}' (–Ω–∞–ø—Ä., 1500.50)", reply_markup=get_cancel_keyboard())
    await state.set_state(AddTransaction.waiting_for_amount)
    await callback.answer()

@dp.message(AddTransaction.waiting_for_amount)
async def process_transaction_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –Ω—É–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=get_cancel_keyboard())
            return
        user_data = await state.get_data()
        transaction_type = user_data['transaction_type']
        with sqlite3.connect(DB_FILE) as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO transactions (driver_id, type, amount) VALUES (?, ?, ?)", (message.from_user.id, transaction_type, amount))
            conn.commit()
        await message.answer(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ: **{transaction_type.capitalize()}** –Ω–∞ —Å—É–º—É **{format_currency(amount)}**.", parse_mode=ParseMode.MARKDOWN, reply_markup=get_main_menu_keyboard())
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä., 150.50).", reply_markup=get_cancel_keyboard())

@dp.message(F.text == "üìä –ú–æ—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_my_stats(message: Message):
    user_id = message.from_user.id
    current_month = datetime.now().strftime('%Y-%m')
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT type, SUM(amount) FROM transactions WHERE driver_id = ? AND strftime('%Y-%m', date) = ? GROUP BY type", (user_id, current_month))
        monthly_stats = cursor.fetchall()
        cursor.execute("SELECT type, SUM(amount) FROM transactions WHERE driver_id = ? GROUP BY type", (user_id,))
        total_stats = cursor.fetchall()
    def format_stats(title, stats):
        text = f"**{title}**\n"
        income = sum(amt for type, amt in stats if type in ['–¥–æ—Ö—ñ–¥', '—á–∞–π'])
        expenses = sum(amt for type, amt in stats if type not in ['–¥–æ—Ö—ñ–¥', '—á–∞–π'])
        if not stats: return f"**{title}**\n–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.\n"
        text += f"üü¢ **–ó–∞—Ä–æ–±–ª–µ–Ω–æ:** {format_currency(income)}\n"
        text += f"üî¥ **–í–∏—Ç—Ä–∞—á–µ–Ω–æ:** {format_currency(expenses)}\n"
        text += f"üí∞ **–ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫:** {format_currency(income - expenses)}\n\n–î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è:\n"
        for type, amount in stats:
            text += f" - {type.capitalize()}: {format_currency(amount)}\n"
        return text
    await message.answer(f"{format_stats('üóìÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å', monthly_stats)}\n---\n{format_stats('üï∞Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤–µ—Å—å —á–∞—Å', total_stats)}", parse_mode=ParseMode.MARKDOWN)

@dp.message(F.text == "üìà –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def advanced_stats_menu(message: Message):
    buttons = [[InlineKeyboardButton(text="–°—å–æ–≥–æ–¥–Ω—ñ", callback_data="stats_period_today")], [InlineKeyboardButton(text="–í—á–æ—Ä–∞", callback_data="stats_period_yesterday")], [InlineKeyboardButton(text="–¶–µ–π —Ç–∏–∂–¥–µ–Ω—å", callback_data="stats_period_week")], [InlineKeyboardButton(text="–¶–µ–π –º—ñ—Å—è—Ü—å", callback_data="stats_period_month")]]
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data.startswith("stats_period_"))
async def show_advanced_stats(callback: CallbackQuery):
    period = callback.data.split("_")[-1]
    today = datetime.now()
    if period == "today":
        start_date, end_date, title = today.strftime('%Y-%m-%d'), today.strftime('%Y-%m-%d'), "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"
    elif period == "yesterday":
        start_date, end_date, title = (today - timedelta(days=1)).strftime('%Y-%m-%d'), (today - timedelta(days=1)).strftime('%Y-%m-%d'), "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–æ—Ä–∞"
    elif period == "week":
        start_date, end_date, title = (today - timedelta(days=today.weekday())).strftime('%Y-%m-%d'), today.strftime('%Y-%m-%d'), "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å"
    else:
        start_date, end_date, title = today.strftime('%Y-%m-01'), today.strftime('%Y-%m-%d'), "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ü–µ–π –º—ñ—Å—è—Ü—å"
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT type, SUM(amount) FROM transactions WHERE driver_id = ? AND date(date) BETWEEN ? AND ? GROUP BY type", (callback.from_user.id, start_date, end_date))
        stats = cursor.fetchall()
    income = sum(amt for type, amt in stats if type in ['–¥–æ—Ö—ñ–¥', '—á–∞–π'])
    expenses = sum(amt for type, amt in stats if type not in ['–¥–æ—Ö—ñ–¥', '—á–∞–π'])
    text = f"**{title}**\n\n"
    if not stats: text += "–ó–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö."
    else: text += f"üü¢ **–ó–∞—Ä–æ–±–ª–µ–Ω–æ:** {format_currency(income)}\nüî¥ **–í–∏—Ç—Ä–∞—á–µ–Ω–æ:** {format_currency(expenses)}\nüí∞ **–ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫:** {format_currency(income - expenses)}\n"
    await callback.message.edit_text(text, parse_mode=ParseMode.MARKDOWN)
    await callback.answer()

@dp.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥ –í–æ–¥—ñ—ó–≤")
async def show_rating(message: Message):
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        current_month = datetime.now().strftime('%Y-%m')
        cursor.execute("SELECT DISTINCT driver_id FROM transactions WHERE strftime('%Y-%m', date) = ?", (current_month,))
        driver_ids = [row[0] for row in cursor.fetchall()]
        rating_data = []
        for user_id in driver_ids:
            cursor.execute("SELECT name, car_brand, car_plate FROM drivers WHERE user_id = ?", (user_id,))
            driver_info = cursor.fetchone()
            if not driver_info: continue
            cursor.execute("SELECT SUM(amount) FROM transactions WHERE driver_id = ? AND type IN ('–¥–æ—Ö—ñ–¥', '—á–∞–π') AND strftime('%Y-%m', date) = ?", (user_id, current_month))
            income = cursor.fetchone()[0] or 0
            cursor.execute("SELECT type, SUM(amount) FROM transactions WHERE driver_id = ? AND type NOT IN ('–¥–æ—Ö—ñ–¥', '—á–∞–π') AND strftime('%Y-%m', date) = ? GROUP BY type", (user_id, current_month))
            expenses_list = cursor.fetchall()
            expenses_total = sum(amount for _, amount in expenses_list)
            net_income = income - expenses_total
            rating_data.append({"info": driver_info, "net_income": net_income, "expenses": dict(expenses_list)})
    sorted_rating = sorted(rating_data, key=lambda x: x['net_income'], reverse=True)[:10]
    text = f"üèÜ **–†–µ–π—Ç–∏–Ω–≥ –≤–æ–¥—ñ—ó–≤ –∑–∞ —á–∏—Å—Ç–∏–º –ø—Ä–∏–±—É—Ç–∫–æ–º** üèÜ\n_(–∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å)_\n\n"
    if not sorted_rating:
        text += "–©–µ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –≤ —Ü—å–æ–º—É –º—ñ—Å—è—Ü—ñ."
    medals = ["ü•á", "ü•à", "ü•â"]
    for i, data in enumerate(sorted_rating):
        place = medals[i] if i < 3 else f"**{i+1}.**"
        name, car, plate = data['info']
        text += f"{place} **{name}** ({car}, {plate})\n"
        text += f"   üí∞ **–ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {format_currency(data['net_income'])}**\n"
        if data['expenses']:
            text += f"   *–í–∏—Ç—Ä–∞—Ç–∏:*\n"
            for exp_type, amount in data['expenses'].items():
                text += f"     - {exp_type.capitalize()}: {format_currency(amount)}\n"
        text += "---\n"
    await message.answer(text, parse_mode=ParseMode.MARKDOWN)

@dp.message(F.text == "üë§ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å")
async def show_my_profile(message: Message):
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT name, car_brand, car_plate, platform FROM drivers WHERE user_id = ?", (message.from_user.id,))
        profile = cursor.fetchone()
    if profile:
        name, car, plate, platform = profile
        text = f"**üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:**\n\n**–Ü–º'—è:** {name}\n**–ê–≤—Ç–æ:** {car}\n**–ù–æ–º–µ—Ä:** {plate}\n**–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** {platform}\n\n–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ?"
        buttons = [[InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="edit_profile_start")]]
        await message.answer(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data == "edit_profile_start")
async def edit_profile_start(callback: CallbackQuery, state: FSMContext):
    buttons = [[InlineKeyboardButton(text="–Ü–º'—è", callback_data="edit_field_name")], [InlineKeyboardButton(text="–ê–≤—Ç–æ", callback_data="edit_field_car_brand")], [InlineKeyboardButton(text="–ù–æ–º–µ—Ä", callback_data="edit_field_car_plate")], [InlineKeyboardButton(text="–ü–ª–∞—Ç—Ñ–æ—Ä–º—É", callback_data="edit_field_platform")]]
    await callback.message.edit_text("–Ø–∫–µ –ø–æ–ª–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await state.set_state(EditProfile.choosing_field)

@dp.callback_query(EditProfile.choosing_field, F.data.startswith("edit_field_"))
async def edit_profile_choose_field(callback: CallbackQuery, state: FSMContext):
    field = '_'.join(callback.data.split("_")[2:])
    field_map = {'name': "—ñ–º'—è", 'car_brand': "–º–∞—Ä–∫—É –∞–≤—Ç–æ", 'car_plate': "–Ω–æ–º–µ—Ä –∞–≤—Ç–æ", 'platform': "–ø–ª–∞—Ç—Ñ–æ—Ä–º—É"}
    await state.update_data(field_to_edit=field)
    await callback.message.edit_text(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—è '{field_map[field]}':", reply_markup=get_cancel_keyboard())
    await state.set_state(EditProfile.entering_new_value)
    await callback.answer()

@dp.message(EditProfile.entering_new_value)
async def edit_profile_enter_value(message: Message, state: FSMContext):
    user_data = await state.get_data()
    field = user_data['field_to_edit']
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute(f"UPDATE drivers SET {field} = ? WHERE user_id = ?", (message.text, message.from_user.id))
        conn.commit()
    await message.answer("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()
    await show_my_profile(message)

@dp.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID: return
    await state.clear()
    keyboard = await get_admin_user_list_keyboard()
    await message.answer("–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ! üßë‚Äçüîß\n–û–±–µ—Ä—ñ—Ç—å –≤–æ–¥—ñ—è –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è:", reply_markup=keyboard)
    await state.set_state(AdminEdit.choosing_user)

@dp.callback_query(AdminEdit.choosing_user, F.data.startswith("admin_page_"))
async def admin_paginate_users(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[-1])
    keyboard = await get_admin_user_list_keyboard(page)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("admin_select_user_"))
async def admin_select_user(callback: CallbackQuery, state: FSMContext, user_id_from_context: int = None):
    user_id_to_edit = user_id_from_context if user_id_from_context else int(callback.data.split("_")[-1])
    await state.update_data(user_to_edit=user_id_to_edit)
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM drivers WHERE user_id = ?", (user_id_to_edit,))
        user_name_result = cursor.fetchone()
        if user_name_result is None:
            await callback.message.edit_text("–ü–æ–º–∏–ª–∫–∞: –≤–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return
        user_name = user_name_result[0]
    keyboard = await get_admin_user_management_keyboard(user_id_to_edit)
    await callback.message.edit_text(f"–ö–µ—Ä—É–≤–∞–Ω–Ω—è –≤–æ–¥—ñ—î–º: **{user_name}**\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
    await state.set_state(AdminEdit.choosing_user)
    await callback.answer()

@dp.callback_query(AdminEdit.choosing_user, F.data == "admin_back_to_list")
async def admin_back_to_list(callback: CallbackQuery, state: FSMContext):
    keyboard = await get_admin_user_list_keyboard()
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –≤–æ–¥—ñ—è –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(AdminEdit.choosing_user, F.data.startswith("admin_edit_profile_"))
async def admin_edit_profile_start(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[-1])
    buttons = [
        [InlineKeyboardButton(text="–Ü–º'—è", callback_data="admin_edit_name")],
        [InlineKeyboardButton(text="–ê–≤—Ç–æ", callback_data="admin_edit_car_brand")],
        [InlineKeyboardButton(text="–ù–æ–º–µ—Ä", callback_data="admin_edit_car_plate")],
        [InlineKeyboardButton(text="–ü–ª–∞—Ç—Ñ–æ—Ä–º—É", callback_data="admin_edit_platform")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_select_user_{user_id}")]
    ]
    await callback.message.edit_text("–Ø–∫–µ –ø–æ–ª–µ –ø—Ä–æ—Ñ—ñ–ª—é –∑–º—ñ–Ω–∏—Ç–∏?", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await state.set_state(AdminEdit.choosing_field)
    await callback.answer()

@dp.callback_query(AdminEdit.choosing_field, F.data.startswith("admin_edit_"))
async def admin_choose_field(callback: CallbackQuery, state: FSMContext):
    field = '_'.join(callback.data.split("_")[2:])
    field_map = {'name': "—ñ–º'—è", 'car_brand': "–º–∞—Ä–∫—É –∞–≤—Ç–æ", 'car_plate': "–Ω–æ–º–µ—Ä –∞–≤—Ç–æ", 'platform': "–ø–ª–∞—Ç—Ñ–æ—Ä–º—É"}
    await state.update_data(field_to_edit=field)
    await callback.message.edit_text(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—è **'{field_map[field]}'**:", parse_mode=ParseMode.MARKDOWN, reply_markup=get_cancel_keyboard())
    await state.set_state(AdminEdit.entering_new_value)
    await callback.answer()

@dp.message(AdminEdit.entering_new_value)
async def admin_enter_new_value(message: Message, state: FSMContext):
    user_data = await state.get_data()
    field, user_id, new_value = user_data['field_to_edit'], user_data['user_to_edit'], message.text
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute(f"UPDATE drivers SET {field} = ? WHERE user_id = ?", (new_value, user_id))
        conn.commit()
    await message.answer("‚úÖ –î–∞–Ω—ñ –≤–æ–¥—ñ—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.set_state(AdminEdit.choosing_user)
    fake_callback_message = types.Message(message_id=0, date=datetime.now(), chat=message.chat)
    fake_callback = types.CallbackQuery(id="0", from_user=message.from_user, message=fake_callback_message, data="")
    await admin_select_user(fake_callback, state, user_id_from_context=user_id)

@dp.callback_query(AdminEdit.choosing_user, F.data.startswith("admin_manage_finances_"))
async def admin_manage_finances(callback: CallbackQuery, state: FSMContext):
    user_id = (await state.get_data())['user_to_edit']
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, date, type, amount FROM transactions WHERE driver_id = ? ORDER BY date DESC LIMIT 10", (user_id,))
        transactions = cursor.fetchall()
        cursor.execute("SELECT name FROM drivers WHERE user_id=?", (user_id,))
        user_name_result = cursor.fetchone()
        if user_name_result is None: return
        user_name = user_name_result[0]
    text = f"**–û—Å—Ç–∞–Ω–Ω—ñ 10 –æ–ø–µ—Ä–∞—Ü—ñ–π –≤–æ–¥—ñ—è {user_name}:**\n\n"
    if not transactions: text += "–û–ø–µ—Ä–∞—Ü—ñ–π —â–µ –Ω–µ –±—É–ª–æ."
    keyboard = []
    for id, date, type, amount in transactions:
        sign = "üü¢" if type in ['–¥–æ—Ö—ñ–¥', '—á–∞–π'] else "üî¥"
        date_str = datetime.fromisoformat(date).strftime('%d.%m %H:%M')
        text += f"{sign} {date_str} - {type.capitalize()}: {format_currency(amount)}\n"
        keyboard.append([
            InlineKeyboardButton(text=f"‚úèÔ∏è –†–µ–¥. ‚Ññ{id}", callback_data=f"admin_edit_trans_{id}"),
            InlineKeyboardButton(text=f"‚ùå –í–∏–¥. ‚Ññ{id}", callback_data=f"admin_delete_trans_{id}")
        ])
    keyboard.append([InlineKeyboardButton(text="‚úÖ –î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é", callback_data=f"admin_add_trans_{user_id}")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_select_user_{user_id}")])
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode=ParseMode.MARKDOWN)
    await state.set_state(AdminEdit.managing_finances)
    await callback.answer()

@dp.callback_query(AdminEdit.managing_finances, F.data.startswith("admin_edit_trans_"))
async def admin_edit_transaction_start(callback: CallbackQuery, state: FSMContext):
    transaction_id = int(callback.data.split("_")[-1])
    await state.update_data(transaction_to_edit=transaction_id)
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Å—É–º—É –¥–ª—è —Ü—ñ—î—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:", reply_markup=get_cancel_keyboard())
    await state.set_state(AdminEdit.editing_transaction_amount)
    await callback.answer()

@dp.message(AdminEdit.editing_transaction_amount)
async def admin_edit_transaction_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –Ω—É–ª—å.", reply_markup=get_cancel_keyboard())
            return
        user_data = await state.get_data()
        transaction_id = user_data['transaction_to_edit']
        with sqlite3.connect(DB_FILE) as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE transactions SET amount = ? WHERE id = ?", (amount, transaction_id))
            conn.commit()
        await message.answer("‚úÖ –°—É–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        fake_callback_message = types.Message(message_id=message.message_id + 1, date=datetime.now(), chat=message.chat)
        fake_callback = types.CallbackQuery(id="0", from_user=message.from_user, message=fake_callback_message, data="")
        await state.set_state(AdminEdit.managing_finances)
        await admin_manage_finances(fake_callback, state)
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.", reply_markup=get_cancel_keyboard())

@dp.callback_query(AdminEdit.managing_finances, F.data.startswith("admin_delete_trans_"))
async def admin_delete_transaction(callback: CallbackQuery, state: FSMContext):
    transaction_id = int(callback.data.split("_")[-1])
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM transactions WHERE id = ?", (transaction_id,))
        conn.commit()
    await callback.answer("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ.", show_alert=True)
    await admin_manage_finances(callback, state)

@dp.callback_query(AdminEdit.managing_finances, F.data.startswith("admin_add_trans_"))
async def admin_add_transaction_start(callback: CallbackQuery, state: FSMContext):
    user_id = (await state.get_data())['user_to_edit']
    buttons = [
        [InlineKeyboardButton(text="üí∞ –î–æ—Ö—ñ–¥", callback_data="admin_add_type_–¥–æ—Ö—ñ–¥"), InlineKeyboardButton(text="üéÅ –ß–∞–π–æ–≤—ñ", callback_data="admin_add_type_—á–∞–π")],
        [InlineKeyboardButton(text="‚õΩ –ü–∞–ª–∏–≤–æ", callback_data="admin_add_type_–ø–∞–ª–∏–≤–æ"), InlineKeyboardButton(text="üßº –ú–∏–π–∫–∞", callback_data="admin_add_type_–º–∏–π–∫–∞")],
        [InlineKeyboardButton(text="üçî –á–∂–∞", callback_data="admin_add_type_—ó–∂–∞"), InlineKeyboardButton(text="üõ†Ô∏è –†–µ–º–æ–Ω—Ç", callback_data="admin_add_type_—Ä–µ–º–æ–Ω—Ç")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_manage_finances_{user_id}")]
    ]
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await state.set_state(AdminEdit.adding_transaction_type)
    await callback.answer()

@dp.callback_query(AdminEdit.adding_transaction_type, F.data.startswith("admin_add_type_"))
async def admin_add_transaction_type(callback: CallbackQuery, state: FSMContext):
    trans_type = callback.data.split("_")[-1]
    await state.update_data(admin_trans_type=trans_type)
    await callback.message.edit_text(f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è '{trans_type.capitalize()}':", reply_markup=get_cancel_keyboard())
    await state.set_state(AdminEdit.adding_transaction_amount)
    await callback.answer()

@dp.message(AdminEdit.adding_transaction_amount)
async def admin_add_transaction_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –Ω—É–ª—å.", reply_markup=get_cancel_keyboard())
            return
        user_data = await state.get_data()
        user_id = user_data['user_to_edit']
        trans_type = user_data['admin_trans_type']
        with sqlite3.connect(DB_FILE) as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO transactions (driver_id, type, amount) VALUES (?, ?, ?)", (user_id, trans_type, amount))
            conn.commit()
        await message.answer("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
        fake_callback_message = types.Message(message_id=message.message_id + 1, date=datetime.now(), chat=message.chat)
        fake_callback = types.CallbackQuery(id="0", from_user=message.from_user, message=fake_callback_message, data=f"admin_manage_finances_{user_id}")
        await state.set_state(AdminEdit.managing_finances)
        await admin_manage_finances(fake_callback, state)
    except ValueError:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.", reply_markup=get_cancel_keyboard())

@dp.callback_query(AdminEdit.choosing_user, F.data == "admin_finish")
async def admin_finish(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è.")
    await callback.message.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())
    await callback.answer()

@dp.message(Command("settings"))
async def admin_settings(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID: return
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT value FROM settings WHERE key = 'password'")
        current_password = cursor.fetchone()[0]
    text = (f"‚öôÔ∏è **–ü–∞–Ω–µ–ª—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å** ‚öôÔ∏è\n\n"
            f"–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –±–æ—Ç–∞.\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: `{current_password}`")
    buttons = [[InlineKeyboardButton(text="üîë –ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å", callback_data="settings_change_password")]]
    await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons), parse_mode=ParseMode.MARKDOWN)
    await state.set_state(AdminSettings.choosing_setting)

@dp.callback_query(AdminSettings.choosing_setting, F.data == "settings_change_password")
async def settings_change_password_prompt(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–æ–¥—ñ—ó–≤:", reply_markup=get_cancel_keyboard())
    await state.set_state(AdminSettings.entering_new_password)
    await callback.answer()

@dp.message(AdminSettings.entering_new_password)
async def settings_set_new_password(message: Message, state: FSMContext):
    new_password = message.text
    if len(new_password) < 4:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–æ–≤–∂–∏–Ω–æ—é –º—ñ–Ω—ñ–º—É–º 4 —Å–∏–º–≤–æ–ª–∏.", reply_markup=get_cancel_keyboard())
        return
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE settings SET value = ? WHERE key = 'password'", (new_password,))
        conn.commit()
    await state.clear()
    await message.answer(f"‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ `{new_password}`", parse_mode=ParseMode.MARKDOWN)
    await cmd_start(message, state)

async def set_main_menu(bot: Bot):
    main_menu_commands = [
        BotCommand(command="/start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
        BotCommand(command="/menu", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
        BotCommand(command="/admin", description="–ö–µ—Ä—É–≤–∞–Ω–Ω—è –≤–æ–¥—ñ—è–º–∏ (–¥–ª—è –∞–¥–º—ñ–Ω–∞)"),
        BotCommand(command="/settings", description="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ (–¥–ª—è –∞–¥–º—ñ–Ω–∞)"),
    ]
    await bot.set_my_commands(main_menu_commands)

async def main():
    if not BOT_TOKEN:
        logging.critical("–ü–û–ú–ò–õ–ö–ê: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ BOT_TOKEN. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥—É.")
        return

    bot = Bot(token=BOT_TOKEN)
    
    dp.callback_query.register(handle_cancel_action, F.data == "action_cancel")
    dp.message.register(cmd_start, CommandStart())
    dp.message.register(show_main_menu, Command("menu"))
    dp.message.register(process_password, Registration.waiting_for_password)
    dp.message.register(process_name, Registration.waiting_for_name)
    dp.message.register(process_car_brand, Registration.waiting_for_car_brand)
    dp.message.register(process_car_plate, Registration.waiting_for_car_plate)
    dp.message.register(process_platform_and_finish_reg, Registration.waiting_for_platform)
    dp.message.register(add_income_menu, F.text == "‚úÖ –î–æ–¥–∞—Ç–∏ –î–æ—Ö—ñ–¥/–ß–∞–π–æ–≤—ñ")
    dp.message.register(add_expense_menu, F.text == "‚ûñ –î–æ–¥–∞—Ç–∏ –í–∏—Ç—Ä–∞—Ç—É")
    dp.callback_query.register(process_add_transaction_type, F.data.startswith("add_transaction_"))
    dp.message.register(process_transaction_amount, AddTransaction.waiting_for_amount)
    dp.message.register(show_my_stats, F.text == "üìä –ú–æ—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    dp.message.register(advanced_stats_menu, F.text == "üìà –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    dp.callback_query.register(show_advanced_stats, F.data.startswith("stats_period_"))
    dp.message.register(show_rating, F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥ –í–æ–¥—ñ—ó–≤")
    dp.message.register(show_my_profile, F.text == "üë§ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å")
    dp.callback_query.register(edit_profile_start, F.data == "edit_profile_start")
    dp.callback_query.register(edit_profile_choose_field, EditProfile.choosing_field, F.data.startswith("edit_field_"))
    dp.message.register(edit_profile_enter_value, EditProfile.entering_new_value)
    dp.message.register(admin_panel, Command("admin"))
    dp.callback_query.register(admin_paginate_users, AdminEdit.choosing_user, F.data.startswith("admin_page_"))
    dp.callback_query.register(admin_select_user, F.data.startswith("admin_select_user_"))
    dp.callback_query.register(admin_back_to_list, AdminEdit.choosing_user, F.data == "admin_back_to_list")
    dp.callback_query.register(admin_edit_profile_start, AdminEdit.choosing_user, F.data.startswith("admin_edit_profile_"))
    dp.callback_query.register(admin_choose_field, AdminEdit.choosing_field, F.data.startswith("admin_edit_"))
    dp.message.register(admin_enter_new_value, AdminEdit.entering_new_value)
    dp.callback_query.register(admin_manage_finances, AdminEdit.choosing_user, F.data.startswith("admin_manage_finances_"))
    dp.callback_query.register(admin_edit_transaction_start, AdminEdit.managing_finances, F.data.startswith("admin_edit_trans_"))
    dp.message.register(admin_edit_transaction_amount, AdminEdit.editing_transaction_amount)
    dp.callback_query.register(admin_delete_transaction, AdminEdit.managing_finances, F.data.startswith("admin_delete_trans_"))
    dp.callback_query.register(admin_add_transaction_start, AdminEdit.managing_finances, F.data.startswith("admin_add_trans_"))
    dp.callback_query.register(admin_add_transaction_type, AdminEdit.adding_transaction_type, F.data.startswith("admin_add_type_"))
    dp.message.register(admin_add_transaction_amount, AdminEdit.adding_transaction_amount)
    dp.callback_query.register(admin_finish, AdminEdit.choosing_user, F.data == "admin_finish")
    dp.message.register(admin_settings, Command("settings"))
    dp.callback_query.register(settings_change_password_prompt, AdminSettings.choosing_setting, F.data == "settings_change_password")
    dp.message.register(settings_set_new_password, AdminSettings.entering_new_password)
    
    init_db()
    await set_main_menu(bot)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ "—à–∏—Ä–º—É" –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ –¥–ª—è Render
        flask_thread = Thread(target=run_flask)
        flask_thread.start()
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –ª–æ–≥—ñ–∫—É –±–æ—Ç–∞
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")